import java.lang.IllegalArgumentException;import edu.princeton.cs.algs4.Digraph;import edu.princeton.cs.algs4.In;import java.util.ArrayList;import java.util.TreeSet;public class WordNet {    private Digraph g;    private ArrayList<String[]> idHT;    // constructor takes the name of the two input files    public WordNet(String synsets, String hypernyms) {        if (synsets == null || hypernyms == null) {            throw new IllegalArgumentException();        }        idHT = new ArrayList<String[]>();        // read synsets:        In synsetsFile = new In(synsets);        String aline = synsetsFile.readLine();        String[] fields;        int id;        int idNumber = 0;        while (aline != null) {            fields = aline.split(",");            id = Integer.parseInt(fields[0]);            String[] thisSynset = fields[1].split(" ");            idHT.add(id, thisSynset);            idNumber++;            aline = synsetsFile.readLine();        }        // read hypernyms:        In hypernymsFile = new In(hypernyms);        aline = hypernymsFile.readLine();        g = new Digraph(idNumber);        int[] outdegrees = new int[idNumber];        while (aline != null) {            fields = aline.split(",");            id = Integer.parseInt(fields[0]);            for (int i = 1; i < fields.length; i++) {                g.addEdge(id, Integer.parseInt(fields[i]));            }            outdegrees[id] = fields.length - 1;            aline = hypernymsFile.readLine();        }        // test whether digraph is a rooted DAG:        int numberZeroDegree = 0;        for (int i : outdegrees) if (i == 0) numberZeroDegree++;        if (numberZeroDegree != 1) throw new IllegalArgumentException();    }    // returns all WordNet nouns    public Iterable<String> nouns() {    }//    // is the word a WordNet noun?//    public boolean isNoun(String word) {////    }////    // distance between nounA and nounB (defined below)//    public int distance(String nounA, String nounB) {////    }////    // a synset (second field of synsets.txt) that is the common ancestor of nounA and nounB//    // in a shortest ancestral path (defined below)//    public String sap(String nounA, String nounB) {////    }    // do unit testing of this class    public static void main(String[] args) {        WordNet wn = new WordNet("D:\\Codes\\Algorithms-Princiton-Univeristy\\Algorithms-Princeton-University\\Week1-Sem2\\src\\synsets.txt", "D:\\Codes\\Algorithms-Princiton-Univeristy\\Algorithms-Princeton-University\\Week1-Sem2\\src\\hypernyms.txt");    }}